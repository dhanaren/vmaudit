<project name="vmcheck" default="compile" basedir=".">

	<!-- ==================== File and Directory Names ======================== -->
	<!-- #Project specific props -->
	<property file="build.properties" />

	<property name="root.dir" location="${basedir}" />
	<property name="project.name" value="/${project.name}" />

	<property name="tomcat.home" value="${tomcat.home}" />
	<property name="app.path" value="/${project.name}" />
	<property name="java.home" value="/${java.home}" />

	<property name="build.home" value="${root.dir}/build" />
	<property name="lib.home" value="${root.dir}/lib" />
	<property name="dist.home" value="${root.dir}/dist" />
	<property name="src.home" value="${root.dir}/src" />
	<property name="web.home" value="${root.dir}/web" />
	<!-- archive directory setup -->
	<property name="dist.dir" location="${root.dir}/dist" />
	<property name="dist.project.dir" location="${dist.dir}/${project.name}" />
	<property name="dist.project.war.dir" location="${dist.dir}/${project.name}/war" />
	<!-- Project setup -->
	<property name="project.root.dir" location="${root.dir}" />
	<property name="module.lib.dir" location="${root.dir}/lib" />
	<!-- build directory setup -->
	<property name="build.dir" location="${root.dir}/build" />
	<property name="build.classes.dir" location="${build.dir}/WEB-INF/classes" />
	<!-- webapp directory setup -->
	<property name="webapp.dir" location="${tomcat.home}/webapps" />
	<property name="webapp.project.dir" location="${tomcat.home}/j2ee/home/webapps/${project.name}" />
	<!--  ==================== Compilation Control Options ==================== -->

	<property name="compile.debug" value="true" />
	<property name="compile.deprecation" value="false" />
	<property name="compile.optimize" value="false" />

	<!-- ==================== All Target ====================================== -->

	<!--
		
		The "all" target is a shortcut for running the "clean" target followed
		by the "compile" target, to force a complete recompile.
		
	-->

	<target name="all" depends="clean,compile" description="Clean build and dist directories, then compile" />

	<!-- ==================== Clean Target ==================================== -->

	<!--
		
		The "clean" target deletes any previous "build" and "dist" directory,
		so that you can be ensured the application can be built from scratch.
		
	-->

	<target name="clean" description="Delete old build and dist directories">
		<delete dir="${build.home}" />
		<delete dir="${dist.home}" />
	</target>
	<!--
		
		The "clean" target deletes any previous "build" and "dist" directory,
		so that you can be ensured the application can be built from scratch.
		
	-->

	<target name="undeploy-ear" description="UnDeploy ear file from web server">
		<echo>${webapp.dir}\${project.name}</echo>
		<delete dir="${webapp.dir}\${project.name}" />
	</target>
	<!-- ==================== Compile Target ================================== -->

	<!--
		
		The "compile" target transforms source files (from your "src" directory)
		into object files in the appropriate location in the build directory.
		This example assumes that you will be including your classes in an
		unpacked directory hierarchy under "/WEB-INF/classes".
		
	-->

	<target name="compile" depends="prepare" description="Compile Java sources">

		<!-- Compile Java classes as necessary -->
		<mkdir dir="${build.home}/WEB-INF/classes" />
		<javac srcdir="${src.home}" destdir="${build.home}/WEB-INF/classes" debug="${compile.debug}" deprecation="${compile.deprecation}" optimize="${compile.optimize}">
			<classpath>
				<fileset dir="${lib.home}/j2ee" includes="*.jar"/>
				<fileset dir="${lib.home}/struts" includes="*.jar" />
				<fileset dir="${lib.home}/events-regression" includes="*.jar" />
				<fileset dir="${lib.home}/json" includes="*.jar" />
				<fileset dir="${lib.home}/mibble-mibs" includes="*.jar"/>
				<!--fileset dir="${lib.home}/displaytag" includes="*.jar" />
				<fileset dir="${lib.home}/iText" includes="*.jar" /-->
			</classpath>
		</javac>

		<!-- Copy application resources -->
		<copy todir="${build.home}/WEB-INF/classes">
			<fileset dir="${src.home}" excludes="**/*.java" />
		</copy>
		<copy todir="${build.home}/WEB-INF/src">
			<fileset dir="${src.home}" excludes="**/*.class" />
		</copy>
		<copy todir="${build.home}/WEB-INF/lib">
			<fileset dir="${lib.home}" />
		</copy>

	</target>



	<!-- ==================== Dist Target ===================================== -->


	<!--
		
		The "dist" target creates a binary distribution of your application
		in a directory structure ready to be archived in a tar.gz or zip file.
		Note that this target depends on two others:
		
		* "compile" so that the entire web application (including external
		dependencies) will have been assembled
		
		* "javadoc" so that the application Javadocs will have been created
		
	-->

	<target name="dist" depends="compile,javadoc" description="Create binary distribution">

		<!-- Copy documentation subdirectories -->

		<!--mkdir   dir="${dist.home}/docs" />
			<copy    todir="${dist.home}/docs" >
			<fileset dir="${docs.home}" />
			</copy -->


		<!-- Create application JAR file -->
		<jar jarfile="${dist.home}/${project.name}.war" basedir="${build.home}" />

	</target>



	<!-- ==================== Javadoc Target ================================== -->

	<!--
		
		The "javadoc" target creates Javadoc API documentation for the Java
		classes included in your application.  Normally, this is only required
		when preparing a distribution release, but is available as a separate
		target in case the developer wants to create Javadocs independently.
		
	-->

	<target name="javadoc" depends="compile" description="Create Javadoc API documentation">

		<mkdir dir="${dist.home}/docs/api" />

		<javadoc sourcepath="${src.home}" destdir="${dist.home}/docs/api" packagenames="*"></javadoc>


	</target>



	<!-- ==================== Prepare Target ================================== -->

	<!--
		
		The "prepare" target is used to create the "build" destination directory,
		and copy the static contents of your web application to it.  If you need
		to copy static files from external dependencies, you can customize the
		contents of this task.
		
		Normally, this task is executed indirectly when needed.
		
	-->

	<target name="prepare">

		<!-- Create build directories as needed -->
		<mkdir dir="${build.home}" />
		<mkdir dir="${build.home}/WEB-INF" />
		<mkdir dir="${build.home}/WEB-INF/classes" />

		<!-- Copy static content of this web application -->
		<copy todir="${build.home}">
			<fileset dir="${web.home}" />
		</copy>

	</target>

	<target name="_build-war" depends="compile" description="waring all files">

		<echo message="java.version is ${ant.java.version}" />
		<mkdir dir="${dist.dir}" />
		<mkdir dir="${dist.project.dir}" />
		<!--jar destfile="${dist.project.dir}/${project.name}.jar"></jar-->
		<war destfile="${dist.project.dir}/${project.name}.war" webxml="${project.root.dir}/web/WEB-INF/web.xml">
			<classes dir="${build.classes.dir}" />
			<webinf dir="${lib.home}/struts" includes="*.tld" />
			<fileset dir="${project.root.dir}/web" excludes="WEB-INF/web.xml" />
			<lib dir="${lib.home}/j2ee" includes="*.jar"/>
			<lib dir="${lib.home}/struts" includes="*.jar"/>
			<lib dir="${lib.home}/events-regression" includes="*.jar"/>
			<lib dir="${lib.home}/json" includes="*.jar"/>
			<lib dir="${lib.home}/mibble-mibs" includes="*.jar"/>
			<!--lib dir="${lib.home}/displaytag" includes="*.jar" />
			<lib dir="${lib.home}/iText" includes="*.jar" /-->
		</war>

	</target>

	<target name="deploy-ear" depends="_build-war" description="Deploy ear file to web server">

		<echo message="Copying ${project.name}.war from ${dist.dir} to deployment directory webapp.dir is ${webapp.dir}" />
		<copy todir="${webapp.dir}">
			<fileset dir="${dist.dir}/${project.name}">
				<include name="${project.name}.war" />
			</fileset>
		</copy>

	</target>
</project>